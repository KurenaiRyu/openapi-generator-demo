/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package moe.kurenai.bangumi.apis

import moe.kurenai.bangumi.models.EpType
import moe.kurenai.bangumi.models.ErrorDetail
import moe.kurenai.bangumi.models.GetUserSubjectEpisodeCollection200Response
import moe.kurenai.bangumi.models.PagedUserCharacterCollection
import moe.kurenai.bangumi.models.PagedUserCollection
import moe.kurenai.bangumi.models.PagedUserPersonCollection
import moe.kurenai.bangumi.models.PatchUserSubjectEpisodeCollectionRequest
import moe.kurenai.bangumi.models.PutUserEpisodeCollectionRequest
import moe.kurenai.bangumi.models.SubjectCollectionType
import moe.kurenai.bangumi.models.SubjectType
import moe.kurenai.bangumi.models.UserCharacterCollection
import moe.kurenai.bangumi.models.UserEpisodeCollection
import moe.kurenai.bangumi.models.UserPersonCollection
import moe.kurenai.bangumi.models.UserSubjectCollection
import moe.kurenai.bangumi.models.UserSubjectCollectionModifyPayload

import moe.kurenai.bangumi.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class CollectionBangumiApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * 获取用户单个角色收藏信息
        * 
         * @param username 设置了用户名之后无法使用 UID。 
         * @param characterId 角色 ID 
         * @return UserCharacterCollection
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getUserCharacterCollection(username: kotlin.String, characterId: kotlin.Int): HttpResponse<UserCharacterCollection> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/users/{username}/collections/-/characters/{character_id}".replace("{" + "username" + "}", "$username").replace("{" + "character_id" + "}", "$characterId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 获取用户角色收藏列表
        * 
         * @param username 设置了用户名之后无法使用 UID。 
         * @return PagedUserCharacterCollection
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getUserCharacterCollections(username: kotlin.String): HttpResponse<PagedUserCharacterCollection> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/users/{username}/collections/-/characters".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 获取用户单个条目收藏
        * 获取对应用户的收藏，查看私有收藏需要 access token
         * @param username 设置了用户名之后无法使用 UID。 
         * @param subjectId 条目 ID 
         * @return UserSubjectCollection
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getUserCollection(username: kotlin.String, subjectId: kotlin.Int): HttpResponse<UserSubjectCollection> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/users/{username}/collections/{subject_id}".replace("{" + "username" + "}", "$username").replace("{" + "subject_id" + "}", "$subjectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 获取用户收藏
        * 获取对应用户的收藏，查看私有收藏需要access token。
         * @param username 设置了用户名之后无法使用 UID。 
         * @param subjectType 条目类型，默认为全部  具体含义见 [SubjectType](#model-SubjectType) (optional)
         * @param type 收藏类型，默认为全部  具体含义见 [CollectionType](#model-CollectionType) (optional)
         * @param limit 分页参数 (optional, default to 30)
         * @param offset 分页参数 (optional, default to 0)
         * @return PagedUserCollection
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getUserCollectionsByUsername(username: kotlin.String, subjectType: SubjectType?, type: SubjectCollectionType?, limit: kotlin.Int?, offset: kotlin.Int?): HttpResponse<PagedUserCollection> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            subjectType?.apply { localVariableQuery["subject_type"] = listOf("$subjectType") }
            type?.apply { localVariableQuery["type"] = listOf("$type") }
            limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
            offset?.apply { localVariableQuery["offset"] = listOf("$offset") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/users/{username}/collections".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 章节收藏信息
        * 
         * @param episodeId 章节 ID 
         * @return UserEpisodeCollection
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getUserEpisodeCollection(episodeId: kotlin.Int): HttpResponse<UserEpisodeCollection> {

            val localVariableAuthNames = listOf<String>("HTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/users/-/collections/-/episodes/{episode_id}".replace("{" + "episode_id" + "}", "$episodeId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 获取用户单个人物收藏信息
        * 
         * @param username 设置了用户名之后无法使用 UID。 
         * @param personId 人物 ID 
         * @return UserPersonCollection
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getUserPersonCollection(username: kotlin.String, personId: kotlin.Int): HttpResponse<UserPersonCollection> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/users/{username}/collections/-/persons/{person_id}".replace("{" + "username" + "}", "$username").replace("{" + "person_id" + "}", "$personId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 获取用户人物收藏列表
        * 
         * @param username 设置了用户名之后无法使用 UID。 
         * @return PagedUserPersonCollection
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getUserPersonCollections(username: kotlin.String): HttpResponse<PagedUserPersonCollection> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/users/{username}/collections/-/persons".replace("{" + "username" + "}", "$username"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 章节收藏信息
        * 
         * @param subjectId 条目 ID 
         * @param offset 分页参数 (optional, default to 0)
         * @param limit 分页参数 (optional, default to 100)
         * @param episodeType 章节类型，不传则不按照章节进行筛选 (optional)
         * @return GetUserSubjectEpisodeCollection200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getUserSubjectEpisodeCollection(subjectId: kotlin.Int, offset: kotlin.Int?, limit: kotlin.Int?, episodeType: EpType?): HttpResponse<GetUserSubjectEpisodeCollection200Response> {

            val localVariableAuthNames = listOf<String>("HTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            offset?.apply { localVariableQuery["offset"] = listOf("$offset") }
            limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
            episodeType?.apply { localVariableQuery["episode_type"] = listOf("$episodeType") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/users/-/collections/{subject_id}/episodes".replace("{" + "subject_id" + "}", "$subjectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 修改用户单个收藏
        * 修改条目收藏状态  由于直接修改剧集条目的完成度可能会引起意料之外效果，只能用于修改书籍类条目的完成度。  PATCH 方法的所有请求体字段均可选 
         * @param subjectId 条目 ID 
         * @param userSubjectCollectionModifyPayload  (optional)
         * @return void
        */
        open suspend fun patchUserCollection(subjectId: kotlin.Int, userSubjectCollectionModifyPayload: UserSubjectCollectionModifyPayload?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = userSubjectCollectionModifyPayload

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/v0/users/-/collections/{subject_id}".replace("{" + "subject_id" + "}", "$subjectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 章节收藏信息
        * 同时会重新计算条目的完成度 
         * @param subjectId 条目 ID 
         * @param patchUserSubjectEpisodeCollectionRequest  (optional)
         * @return void
        */
        open suspend fun patchUserSubjectEpisodeCollection(subjectId: kotlin.Int, patchUserSubjectEpisodeCollectionRequest: PatchUserSubjectEpisodeCollectionRequest?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("HTTPBearer")

            val localVariableBody = patchUserSubjectEpisodeCollectionRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PATCH,
            "/v0/users/-/collections/{subject_id}/episodes".replace("{" + "subject_id" + "}", "$subjectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 新增或修改用户单个条目收藏
        * 修改条目收藏状态, 如果不存在则创建，如果存在则修改  由于直接修改剧集条目的完成度可能会引起意料之外效果，只能用于修改书籍类条目的完成度。  方法的所有请求体字段均可选 
         * @param subjectId 条目 ID 
         * @param userSubjectCollectionModifyPayload  (optional)
         * @return void
        */
        open suspend fun postUserCollection(subjectId: kotlin.Int, userSubjectCollectionModifyPayload: UserSubjectCollectionModifyPayload?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = userSubjectCollectionModifyPayload

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v0/users/-/collections/{subject_id}".replace("{" + "subject_id" + "}", "$subjectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 更新章节收藏信息
        * 
         * @param episodeId 章节 ID 
         * @param putUserEpisodeCollectionRequest  (optional)
         * @return void
        */
        open suspend fun putUserEpisodeCollection(episodeId: kotlin.Int, putUserEpisodeCollectionRequest: PutUserEpisodeCollectionRequest?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("HTTPBearer")

            val localVariableBody = putUserEpisodeCollectionRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/v0/users/-/collections/-/episodes/{episode_id}".replace("{" + "episode_id" + "}", "$episodeId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
