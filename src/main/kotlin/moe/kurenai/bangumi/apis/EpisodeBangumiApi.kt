/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package moe.kurenai.bangumi.apis

import moe.kurenai.bangumi.models.EpType
import moe.kurenai.bangumi.models.EpisodeDetail
import moe.kurenai.bangumi.models.ErrorDetail
import moe.kurenai.bangumi.models.PagedEpisode

import moe.kurenai.bangumi.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class EpisodeBangumiApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * Get Episode
        * 
         * @param episodeId 章节 ID 
         * @return EpisodeDetail
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getEpisodeById(episodeId: kotlin.Int): HttpResponse<EpisodeDetail> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/episodes/{episode_id}".replace("{" + "episode_id" + "}", "$episodeId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Episodes
        * 
         * @param subjectId 条目 ID 
         * @param type 参照章节的&#x60;type&#x60; (optional)
         * @param limit 分页参数 (optional, default to 100)
         * @param offset 分页参数 (optional, default to 0)
         * @return PagedEpisode
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getEpisodes(subjectId: kotlin.Int, type: EpType?, limit: kotlin.Int?, offset: kotlin.Int?): HttpResponse<PagedEpisode> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            subjectId?.apply { localVariableQuery["subject_id"] = listOf("$subjectId") }
            type?.apply { localVariableQuery["type"] = listOf("$type") }
            limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
            offset?.apply { localVariableQuery["offset"] = listOf("$offset") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/episodes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
