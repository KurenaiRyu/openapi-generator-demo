/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package moe.kurenai.bangumi.apis

import moe.kurenai.bangumi.models.CharacterRevision
import moe.kurenai.bangumi.models.DetailedRevision
import moe.kurenai.bangumi.models.ErrorDetail
import moe.kurenai.bangumi.models.PagedRevision
import moe.kurenai.bangumi.models.PersonRevision
import moe.kurenai.bangumi.models.SubjectRevision

import moe.kurenai.bangumi.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class RevisionBangumiApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * Get Character Revision
        * 
         * @param revisionId 版本 ID 
         * @return CharacterRevision
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getCharacterRevisionByRevisionId(revisionId: kotlin.Int): HttpResponse<CharacterRevision> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/revisions/characters/{revision_id}".replace("{" + "revision_id" + "}", "$revisionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Character Revisions
        * 
         * @param characterId 角色 ID 
         * @param limit 分页参数 (optional, default to 30)
         * @param offset 分页参数 (optional, default to 0)
         * @return PagedRevision
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getCharacterRevisions(characterId: kotlin.Int, limit: kotlin.Int?, offset: kotlin.Int?): HttpResponse<PagedRevision> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            characterId?.apply { localVariableQuery["character_id"] = listOf("$characterId") }
            limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
            offset?.apply { localVariableQuery["offset"] = listOf("$offset") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/revisions/characters",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Episode Revision
        * 
         * @param revisionId 版本 ID 
         * @return DetailedRevision
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getEpisodeRevisionByRevisionId(revisionId: kotlin.Int): HttpResponse<DetailedRevision> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/revisions/episodes/{revision_id}".replace("{" + "revision_id" + "}", "$revisionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Episode Revisions
        * 
         * @param episodeId 章节 ID 
         * @param limit 分页参数 (optional, default to 30)
         * @param offset 分页参数 (optional, default to 0)
         * @return PagedRevision
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getEpisodeRevisions(episodeId: kotlin.Int, limit: kotlin.Int?, offset: kotlin.Int?): HttpResponse<PagedRevision> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            episodeId?.apply { localVariableQuery["episode_id"] = listOf("$episodeId") }
            limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
            offset?.apply { localVariableQuery["offset"] = listOf("$offset") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/revisions/episodes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Person Revision
        * 
         * @param revisionId 历史版本 ID 
         * @return PersonRevision
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getPersonRevisionByRevisionId(revisionId: kotlin.Int): HttpResponse<PersonRevision> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/revisions/persons/{revision_id}".replace("{" + "revision_id" + "}", "$revisionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Person Revisions
        * 
         * @param personId 角色 ID 
         * @param limit 分页参数 (optional, default to 30)
         * @param offset 分页参数 (optional, default to 0)
         * @return PagedRevision
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getPersonRevisions(personId: kotlin.Int, limit: kotlin.Int?, offset: kotlin.Int?): HttpResponse<PagedRevision> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            personId?.apply { localVariableQuery["person_id"] = listOf("$personId") }
            limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
            offset?.apply { localVariableQuery["offset"] = listOf("$offset") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/revisions/persons",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Subject Revision
        * 
         * @param revisionId 版本 ID 
         * @return SubjectRevision
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getSubjectRevisionByRevisionId(revisionId: kotlin.Int): HttpResponse<SubjectRevision> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/revisions/subjects/{revision_id}".replace("{" + "revision_id" + "}", "$revisionId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Subject Revisions
        * 
         * @param subjectId 条目 ID 
         * @param limit 分页参数 (optional, default to 30)
         * @param offset 分页参数 (optional, default to 0)
         * @return PagedRevision
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getSubjectRevisions(subjectId: kotlin.Int, limit: kotlin.Int?, offset: kotlin.Int?): HttpResponse<PagedRevision> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            subjectId?.apply { localVariableQuery["subject_id"] = listOf("$subjectId") }
            limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
            offset?.apply { localVariableQuery["offset"] = listOf("$offset") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/revisions/subjects",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
