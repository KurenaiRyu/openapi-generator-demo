/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package moe.kurenai.bangumi.apis

import moe.kurenai.bangumi.models.ErrorDetail
import moe.kurenai.bangumi.models.PersonCharacter
import moe.kurenai.bangumi.models.PersonDetail
import moe.kurenai.bangumi.models.V0RelatedSubject

import moe.kurenai.bangumi.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class PersonBangumiApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * Collect person for current user
        * 为当前用户收藏人物
         * @param personId 人物 ID 
         * @return void
        */
        open suspend fun collectPersonByPersonIdAndUserId(personId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v0/persons/{person_id}/collect".replace("{" + "person_id" + "}", "$personId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Person
        * cache with 60s
         * @param personId 人物 ID 
         * @return PersonDetail
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getPersonById(personId: kotlin.Int): HttpResponse<PersonDetail> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/persons/{person_id}".replace("{" + "person_id" + "}", "$personId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Person Image
        * 
         * @param personId 人物 ID 
         * @param type 枚举值 {small|grid|large|medium} 
         * @return void
        */
        open suspend fun getPersonImageById(personId: kotlin.Int, type: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            type?.apply { localVariableQuery["type"] = listOf("$type") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/persons/{person_id}/image".replace("{" + "person_id" + "}", "$personId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * get person related characters
        * 
         * @param personId 人物 ID 
         * @return kotlin.collections.List<PersonCharacter>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getRelatedCharactersByPersonId(personId: kotlin.Int): HttpResponse<kotlin.collections.List<PersonCharacter>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/persons/{person_id}/characters".replace("{" + "person_id" + "}", "$personId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * get person related subjects
        * 
         * @param personId 人物 ID 
         * @return kotlin.collections.List<V0RelatedSubject>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getRelatedSubjectsByPersonId(personId: kotlin.Int): HttpResponse<kotlin.collections.List<V0RelatedSubject>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/persons/{person_id}/subjects".replace("{" + "person_id" + "}", "$personId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Uncollect person for current user
        * 为当前用户取消收藏人物
         * @param personId 人物 ID 
         * @return void
        */
        open suspend fun uncollectPersonByPersonIdAndUserId(personId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/v0/persons/{person_id}/collect".replace("{" + "person_id" + "}", "$personId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
