/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package moe.kurenai.bangumi.apis

import moe.kurenai.bangumi.models.ErrorDetail
import moe.kurenai.bangumi.models.GetCalendar200ResponseInner
import moe.kurenai.bangumi.models.PagedSubject
import moe.kurenai.bangumi.models.RelatedCharacter
import moe.kurenai.bangumi.models.RelatedPerson
import moe.kurenai.bangumi.models.SearchSubjects200Response
import moe.kurenai.bangumi.models.SearchSubjectsRequest
import moe.kurenai.bangumi.models.Subject
import moe.kurenai.bangumi.models.SubjectCategory
import moe.kurenai.bangumi.models.SubjectType
import moe.kurenai.bangumi.models.V0SubjectRelation

import moe.kurenai.bangumi.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class SubjectBangumiApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * 每日放送
        * 
         * @return kotlin.collections.List<GetCalendar200ResponseInner>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getCalendar(): HttpResponse<kotlin.collections.List<GetCalendar200ResponseInner>> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/calendar",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Subject Characters
        * 
         * @param subjectId 条目 ID 
         * @return kotlin.collections.List<RelatedCharacter>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getRelatedCharactersBySubjectId(subjectId: kotlin.Int): HttpResponse<kotlin.collections.List<RelatedCharacter>> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/subjects/{subject_id}/characters".replace("{" + "subject_id" + "}", "$subjectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Subject Persons
        * 
         * @param subjectId 条目 ID 
         * @return kotlin.collections.List<RelatedPerson>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getRelatedPersonsBySubjectId(subjectId: kotlin.Int): HttpResponse<kotlin.collections.List<RelatedPerson>> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/subjects/{subject_id}/persons".replace("{" + "subject_id" + "}", "$subjectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Subject Relations
        * 
         * @param subjectId 条目 ID 
         * @return kotlin.collections.List<V0SubjectRelation>
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getRelatedSubjectsBySubjectId(subjectId: kotlin.Int): HttpResponse<kotlin.collections.List<V0SubjectRelation>> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/subjects/{subject_id}/subjects".replace("{" + "subject_id" + "}", "$subjectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 获取条目
        * cache with 300s
         * @param subjectId 条目 ID 
         * @return Subject
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getSubjectById(subjectId: kotlin.Int): HttpResponse<Subject> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/subjects/{subject_id}".replace("{" + "subject_id" + "}", "$subjectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Subject Image
        * 
         * @param subjectId 条目 ID 
         * @param type 枚举值 {small|grid|large|medium|common} 
         * @return void
        */
        open suspend fun getSubjectImageById(subjectId: kotlin.Int, type: kotlin.String): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            type?.apply { localVariableQuery["type"] = listOf("$type") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/subjects/{subject_id}/image".replace("{" + "subject_id" + "}", "$subjectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 浏览条目
        * 第一页会 cache 24h，之后会 cache 1h
         * @param type 条目类型 
         * @param cat 条目分类，参照 &#x60;SubjectCategory&#x60; enum (optional)
         * @param series 是否系列，仅对书籍类型的条目有效 (optional)
         * @param platform 平台，仅对游戏类型的条目有效 (optional)
         * @param sort 排序，枚举值 {date|rank} (optional)
         * @param year 年份 (optional)
         * @param month 月份 (optional)
         * @param limit 分页参数 (optional, default to 30)
         * @param offset 分页参数 (optional, default to 0)
         * @return PagedSubject
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getSubjects(type: SubjectType, cat: SubjectCategory?, series: kotlin.Boolean?, platform: kotlin.String?, sort: kotlin.String?, year: kotlin.Int?, month: kotlin.Int?, limit: kotlin.Int?, offset: kotlin.Int?): HttpResponse<PagedSubject> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            type?.apply { localVariableQuery["type"] = listOf("$type") }
            cat?.apply { localVariableQuery["cat"] = listOf("$cat") }
            series?.apply { localVariableQuery["series"] = listOf("$series") }
            platform?.apply { localVariableQuery["platform"] = listOf("$platform") }
            sort?.apply { localVariableQuery["sort"] = listOf("$sort") }
            year?.apply { localVariableQuery["year"] = listOf("$year") }
            month?.apply { localVariableQuery["month"] = listOf("$month") }
            limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
            offset?.apply { localVariableQuery["offset"] = listOf("$offset") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/subjects",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 条目搜索
        * ## 实验性 API， 本 schema 和实际的 API 行为都可能随时发生改动  目前支持的筛选条件包括: - &#x60;type&#x60;: 条目类型，参照 &#x60;SubjectType&#x60; enum， &#x60;或&#x60;。 - &#x60;tag&#x60;: 标签，可以多次出现。&#x60;且&#x60; 关系。 - &#x60;airdate&#x60;: 播出日期/发售日期。&#x60;且&#x60; 关系。 - &#x60;rating&#x60;: 用于搜索指定评分的条目。&#x60;且&#x60; 关系。 - &#x60;rank&#x60;: 用于搜索指定排名的条目。&#x60;且&#x60; 关系。 - &#x60;nsfw&#x60;: 使用 &#x60;include&#x60; 包含NSFW搜索结果。默认排除搜索NSFW条目。无权限情况下忽略此选项，不会返回NSFW条目。  不同筛选条件之间为 &#x60;且&#x60;   由于目前 meilisearch 的一些问题，条目排名更新并不会触发搜索数据更新，所以条目排名可能是过期数据。  希望未来版本的 meilisearch 能解决相关的问题。 
         * @param limit 分页参数 (optional)
         * @param offset 分页参数 (optional)
         * @param searchSubjectsRequest  (optional)
         * @return SearchSubjects200Response
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun searchSubjects(limit: kotlin.Int?, offset: kotlin.Int?, searchSubjectsRequest: SearchSubjectsRequest?): HttpResponse<SearchSubjects200Response> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = searchSubjectsRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()
            limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
            offset?.apply { localVariableQuery["offset"] = listOf("$offset") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v0/search/subjects",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
