/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package moe.kurenai.bangumi.apis

import moe.kurenai.bangumi.models.AccessTokenRequest
import moe.kurenai.bangumi.models.UserAccessToken

import moe.kurenai.bangumi.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class OauthBangumiApi(
    baseUrl: String = ApiClient.OAUTH_BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * 获取授权
        * 第三方应用引导用户访问 Bangumi 授权页获取授权
         * @param clientId App ID，注册应用时获取 
         * @param responseType 验证类型，目前仅支持 code 
         * @param redirectUri 回调 URL，在后台设置的回调地址 (optional)
         * @param scope 请求权限，尚未实现 (optional)
         * @param state 随机参数，随机生产的参数，便于开发者防止跨站攻击 (optional)
         * @return void
        */
        open suspend fun authorize(clientId: kotlin.String, responseType: kotlin.String, redirectUri: kotlin.String?, scope: kotlin.String?, state: kotlin.String?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            clientId?.apply { localVariableQuery["client_id"] = listOf("$clientId") }
            responseType?.apply { localVariableQuery["response_type"] = listOf("$responseType") }
            redirectUri?.apply { localVariableQuery["redirect_uri"] = listOf("$redirectUri") }
            scope?.apply { localVariableQuery["scope"] = listOf("$scope") }
            state?.apply { localVariableQuery["state"] = listOf("$state") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/oauth/authorize",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * 获取 Access Token
        * 第三方应用使用 code（验证代码）/ Refresh Token 换取 Access Token
         * @param accessTokenRequest  (optional)
         * @return UserAccessToken
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getAccessToken(accessTokenRequest: AccessTokenRequest?): HttpResponse<UserAccessToken> {

            val localVariableAuthNames = listOf<String>()

            val localVariableBody = accessTokenRequest

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/oauth/access_token",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
