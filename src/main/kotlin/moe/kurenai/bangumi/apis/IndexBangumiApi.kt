/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package moe.kurenai.bangumi.apis

import moe.kurenai.bangumi.models.ErrorDetail
import moe.kurenai.bangumi.models.Index
import moe.kurenai.bangumi.models.IndexBasicInfo
import moe.kurenai.bangumi.models.IndexSubjectAddInfo
import moe.kurenai.bangumi.models.IndexSubjectEditInfo
import moe.kurenai.bangumi.models.SubjectType

import moe.kurenai.bangumi.infrastructure.*
import io.ktor.client.HttpClientConfig
import io.ktor.client.request.forms.formData
import io.ktor.client.engine.HttpClientEngine
import io.ktor.http.ParametersBuilder

    open class IndexBangumiApi(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    ) : ApiClient(
        baseUrl,
        httpClientEngine,
        httpClientConfig,
    ) {

        /**
        * Add a subject to Index
        * 
         * @param indexId 目录 ID 
         * @param indexSubjectAddInfo  (optional)
         * @return void
        */
        open suspend fun addSubjectToIndexByIndexId(indexId: kotlin.Int, indexSubjectAddInfo: IndexSubjectAddInfo?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("HTTPBearer")

            val localVariableBody = indexSubjectAddInfo

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v0/indices/{index_id}/subjects".replace("{" + "index_id" + "}", "$indexId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Collect index for current user
        * 为当前用户收藏一条目录
         * @param indexId 目录 ID 
         * @return void
        */
        open suspend fun collectIndexByIndexIdAndUserId(indexId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("HTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v0/indices/{index_id}/collect".replace("{" + "index_id" + "}", "$indexId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Delete a subject from a Index
        * 
         * @param indexId 目录 ID 
         * @param subjectId 条目 ID 
         * @return void
        */
        open suspend fun delelteSubjectFromIndexByIndexIdAndSubjectID(indexId: kotlin.Int, subjectId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("HTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/v0/indices/{index_id}/subjects/{subject_id}".replace("{" + "index_id" + "}", "$indexId").replace("{" + "subject_id" + "}", "$subjectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Edit index&#39;s information
        * 
         * @param indexId 目录 ID 
         * @param indexBasicInfo  (optional)
         * @return Index
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun editIndexById(indexId: kotlin.Int, indexBasicInfo: IndexBasicInfo?): HttpResponse<Index> {

            val localVariableAuthNames = listOf<String>("HTTPBearer")

            val localVariableBody = indexBasicInfo

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/v0/indices/{index_id}".replace("{" + "index_id" + "}", "$indexId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Edit subject information in a index
        * 如果条目不存在于目录，会创建该条目
         * @param indexId 目录 ID 
         * @param subjectId 条目 ID 
         * @param indexSubjectEditInfo  (optional)
         * @return void
        */
        open suspend fun editIndexSubjectsByIndexIdAndSubjectID(indexId: kotlin.Int, subjectId: kotlin.Int, indexSubjectEditInfo: IndexSubjectEditInfo?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("HTTPBearer")

            val localVariableBody = indexSubjectEditInfo

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.PUT,
            "/v0/indices/{index_id}/subjects/{subject_id}".replace("{" + "index_id" + "}", "$indexId").replace("{" + "subject_id" + "}", "$subjectId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return jsonRequest(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Index By ID
        * 
         * @param indexId 目录 ID 
         * @return Index
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun getIndexById(indexId: kotlin.Int): HttpResponse<Index> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/indices/{index_id}".replace("{" + "index_id" + "}", "$indexId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Get Index Subjects
        * 
         * @param indexId 目录 ID 
         * @param type 条目类型 (optional)
         * @param limit 分页参数 (optional, default to 30)
         * @param offset 分页参数 (optional, default to 0)
         * @return void
        */
        open suspend fun getIndexSubjectsByIndexId(indexId: kotlin.Int, type: SubjectType?, limit: kotlin.Int?, offset: kotlin.Int?): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("OptionalHTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()
            type?.apply { localVariableQuery["type"] = listOf("$type") }
            limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
            offset?.apply { localVariableQuery["offset"] = listOf("$offset") }

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.GET,
            "/v0/indices/{index_id}/subjects".replace("{" + "index_id" + "}", "$indexId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Create a new index
        * 
         * @return Index
        */
            @Suppress("UNCHECKED_CAST")
        open suspend fun newIndex(): HttpResponse<Index> {

            val localVariableAuthNames = listOf<String>("HTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.POST,
            "/v0/indices",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        /**
        * Uncollect index for current user
        * 为当前用户取消收藏一条目录
         * @param indexId 目录 ID 
         * @return void
        */
        open suspend fun uncollectIndexByIndexIdAndUserId(indexId: kotlin.Int): HttpResponse<Unit> {

            val localVariableAuthNames = listOf<String>("HTTPBearer")

            val localVariableBody = 
                    io.ktor.client.utils.EmptyContent

            val localVariableQuery = mutableMapOf<String, List<String>>()

            val localVariableHeaders = mutableMapOf<String, String>()

            val localVariableConfig = RequestConfig<kotlin.Any?>(
            RequestMethod.DELETE,
            "/v0/indices/{index_id}/collect".replace("{" + "index_id" + "}", "$indexId"),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            )

            return request(
            localVariableConfig,
            localVariableBody,
            localVariableAuthNames
            ).wrap()
            }

        }
